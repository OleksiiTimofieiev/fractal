void Mandelbrot2(void **mlx_ptr, void **win_ptr, int width, int height)
	{
		double MinRe = -2.0;
		double MaxRe = 1.0;
		double MinIm = -1.2;
		double MaxIm = MinIm + (MaxRe - MinRe) * height / width;
		double Re_factor = (MaxRe - MinRe) / (width - 1);
		double Im_factor = (MaxIm - MinIm) / (height - 1);
		
		int MaxIterations = 30;

		for (int y = 0; y < height; ++y)
		{
			double c_im = MaxIm - y * Im_factor;
			
			for (int x = 0; x < width; ++x)
			{
				double c_re = MinRe + x * Re_factor;

				double Z_re = c_re, Z_im = c_im;
				int isInside = 0;
				int n = 0;
				for (; n < MaxIterations; ++n)
				{
					double Z_re2 = Z_re * Z_re;
					double Z_im2 = Z_im * Z_im;
					if (Z_re2 + Z_im2 > 4)
					{
						isInside = 1;
						break;
					}
					Z_im = 2 * Z_re * Z_im + c_im;
					Z_re = Z_re2 - Z_im2 + c_re;
				}
				if (isInside)
				{
					t_hsv _hsv;

					_hsv.H = n % 256;
					_hsv.S = 120;
					_hsv.V = 255 * (n < MaxIterations);

					t_rgb rgb = hsv_to_rgb(_hsv);

					mlx_pixel_put(*mlx_ptr, *win_ptr, x, y, hex_int_converter(RGBToHexadecimal(rgb)));
				}
			}
		}
}
void Julia(void **mlx_ptr, void **win_ptr, int width, int height)
{
	double MinRe = -2.0;
	double MaxRe = 2.0;
	double MinIm = -2.0;
	double MaxIm = MinIm + (MaxRe - MinRe) * height / width;
	
	double Re_factor = (MaxRe - MinRe) / (width - 1);
	double Im_factor = (MaxIm - MinIm) / (height - 1);

	int MaxIterations = 400;

	for (int y = 0; y < height; ++y)
	{
		double c_im = MaxIm - y * Im_factor;
		
		for (int x = 0; x < width; ++x)
		{
			double c_re = MinRe + x * Re_factor;

			double Z_re = c_re, Z_im = c_im;

			int isInside = 0;
			
			int n = 0;
			
			for (; n < MaxIterations; ++n)
			{
				double Z_re2 = Z_re * Z_re * 1.2;
				double Z_im2 = Z_im * Z_im;
				if (Z_re2 + Z_im2 > 4)
				{
					isInside = 1;
					break;
				}
				Z_im = 2 * Z_re * Z_im - 0.700;
				Z_re = Z_re2 - Z_im2 + 0.27;
			}
			if (isInside)
			{
				t_hsv _hsv;

				_hsv.H = n % 256;
				_hsv.S = 120;
				_hsv.V = 255 * (n < MaxIterations);

				t_rgb rgb = hsv_to_rgb(_hsv);

				mlx_pixel_put(*mlx_ptr, *win_ptr, x, y, hex_int_converter(RGBToHexadecimal(rgb)));
				// putpixel(x, y);
			}
		}
	}
}