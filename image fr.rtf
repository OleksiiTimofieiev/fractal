{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red33\green33\blue39;\red255\green255\blue255;\red38\green38\blue38;
\red242\green242\blue242;}
{\*\expandedcolortbl;;\cssrgb\c17255\c17255\c20392;\cssrgb\c100000\c100000\c100000;\cssrgb\c20000\c20000\c20000;
\cssrgb\c96078\c96078\c96078;}
\paperw11900\paperh16840\margl1440\margr1440\vieww22820\viewh17720\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0

\fs56 \cf2 \cb3 2) Comment \'e7a fonctionne ?\cb1 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf2 \cb3 Les images de la MLX sont en fait simplement... des strings (des char * termin\'e9s par \\0, quoi). 1 image = 1 string.\cb1 \
\pard\pardeftab720\partightenfactor0

\i \cf2 \cb3 EDIT: Cf commentaire de Ol ci-dessous, ce sont en fait des suites de char non termin\'e9es par \\0 donc techniquement pas des strings
\i0 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Chaque pixel de votre image est plac\'e9 a la suite dans le string, en commen\'e7ant par le pixel (0, 0) en haut a gauche, puis vers la droite, puis vers le bas. Chaque pixel est d\'e9crit par 4 chars.\cb1 \
\cb3 Exemple pour une r\'e9solution de 800x600 : Vous avez 800x600 = 480 000 pixels.\cb1 \
\cb3 Votre string fera donc 1 920 000 caract\'e8res (+ le \\0 final).\cb1 \
\pard\pardeftab720\partightenfactor0

\b \cf2 \cb3 Comment trouver le bon pixel, dans ce cas ?
\b0  C'est tr\'e9s simple : partons du premier pixel, donc tout en haut a gauche, qui est le pixel (0, 0) sur votre \'e9cran, donc le pixel 0 dans votre string.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Imaginons que vous voulez changer le 6\'e8me pixel, c'est \'e0 dire le (5, 0), c'est a dire qu'on se d\'e9cale de 5 vers la droite. 
\i NB: par convention on \'e9crit toujours (x, y) avec x = abscisses et y = ordonn\'e9es
\i0 \cb1 \
\cb3 Votre pixel est donc d\'e9crit par la position dans le string : 0 + 4 * 5 = 20, sur 4 chars, donc il s'agit des positions 20, 21, 22, 23.\cb1 \
\cb3 Comment descendre sur l'axe des Y maintenant ? Tr\'e8s simple : comme on revient a la ligne a chaque fois, pour passer de (0, 0) a (0, 2) on fait simplement 0 + 4 * Taille de la ligne * 2. Ici, sur une resolution de 800x600, la taille de la ligne est de 800 pixels. Donc le pixel (0, 2) est decrit par les chars 6400, 6401, 6402, 6403 sur notre string.\cb1 \
\cb3 Autre question : pourquoi 4 chars par pixel ? Simplement : le char 1 est la valeur de BLEU, le deuxieme de VERT, le troisieme de ROUGE => RGB. Le quatri\'e8me repr\'e9sente l'alpha, ignorez le pour le moment. Chaque char contient en fait une valeur d'int de 0 a 255. Le pixel d\'e9crit par (0, 0, 255, alpha) sera donc tout rouge. Le pixel (255, 255, 255, alpha) sera tout blanc.\cb1 \
\pard\pardeftab720\partightenfactor0

\fs56 \cf2 \cb3 3) Comment \'e7a s'utilise en pratique ?\cb1 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf2 \cb3 C'est un poil compliqu\'e9 \'e0 mettre en place, mais la bonne nouvelle c'est que vous pourrez juste copier/coller votre code pour tout les projets graphiques.\cb1 \
\pard\pardeftab720\partightenfactor0

\b \cf2 \cb3 Etape 1 : cr\'e9er une image
\b0 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Cr\'e9er une image avec la fonction associ\'e9e :\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\fs30 \cf4 \cb5 pointeur_image = mlx_new_image(pointeur_mlx, largeur, hauteur);\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb3 Gardez bien dans un coin le pointeur image (void*) vous en aurez besoin.\cb1 \
\pard\pardeftab720\partightenfactor0

\b \cf2 \cb3 Etape 2 : Obtenir le string de l'image
\b0 \cb1 \
\pard\pardeftab720\partightenfactor0

\f1\fs30 \cf4 \cb5 my_image_string =  mlx_get_data_addr(pointeur_image, &(bpp), &(s_l), &(endian));\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb3 Pour information, les variables envoyees en adresse ici (parametres 2 3 et 4) signifient :\cb1 \
\cb3 nombre de Bit par pixel, size_line (taille de la ligne), et endian.\cb1 \
\cb3 Ces variables doivent \'eatre envoy\'e9es a la fonction qui les initialise \'e0 la bonne valeur. Personnellement, je ne les utilise pas par la suite. Vous pouvez utiliser size_line pour votre calcul de position de pixel, mais je suis feignant et peureux donc perso je fais autrement.\cb1 \
\pard\pardeftab720\partightenfactor0

\b \cf2 \cb3 Addendum facultatif a propos de ces parametres : 
\b0 je repr\'e9cise un peu car pas mal d'incompr\'e9hensions ici : vous devez \'e9videmment d\'e9clarer bpp, s_l, endian, mais pas besoin de les initialiser, leurs valeurs seront donn\'e9es par la fonction mlx_get_data_addr, c'est pourquoi on a besoin de lui envoyer l'adresse des variables et non pas leurs valeurs (qui n'existent pas si vous ne les avez pas initialis\'e9es). L\'92int\'e9r\'eat de passer ces variables a la fonction est de r\'e9cuperer les bonnes valeurs pour s'en servir plus tard dans votre programme, mais dans la pratique on peut se d\'e9brouiller sans.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Pour info les valeurs sont initialis\'e9es comme suit par la fonction, de m\'e9moire donc je peux me tromper : bpp = 4 chars de 8 octets = 32, size_line = longueur de votre resolution (pour du 800x600 c'est 800 fois 4) et endian est egal a 0 ou 1 selon la machine, sur les macs de l'ecole je crois que c'est 0.\cb1 \
\pard\pardeftab720\partightenfactor0

\b \cf2 \cb3 Etape 3 : Remplir l'image
\b0 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Je ne vous dit pas comment tout faire ici, je vous laisse un peu chercher ^_^ mais ce que je vous conselle, c'est de cr\'e9er une fonction dans le genre :\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\fs30 \cf4 \cb5 void fill_pixel(char *my_image_string, int x, int y, int color);\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb3 Qui va ''poser'' la couleur sur le pixel aux positions x et y. Je vous ais d\'e9j\'e0 d\'e9taill\'e9 les calculs plus haut pour \'e7a.\cb1 \
\pard\pardeftab720\partightenfactor0

\b \cf2 \cb3 Etape 4 : Afficher l'image
\b0 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Juste:\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\fs30 \cf4 \cb5 mlx_put_image_to_window(data, pointeur_window, pointeur_image, 0, 0);\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb3 les deux derniers int sont la position ou vous voulez mettre votre image dans votre fen\'eatre, en g\'e9n\'e9ral vous voudrez laisser \'e0 0, 0.\cb1 \
\cb3 ''data'' c'est votre structure environnement (si vous ne savez pas ce que c'est : en gros c'est une structure ou vous foutez vos variables utiles, genre les pointeurs de la minilibX par exemple, ce qui est essentiel dans les projets graphiques pour avoir tout sous la main). Je ne suis plus certain si la fonction utilise le pointeur MLX ou le pointeur Window que vous aurez dans votre structure data, donc je vous laisse v\'e9rifier ce d\'e9tail si vous le voulez. Il s'agit probablement du pointeur MLX vu qu'on envoie le pointeur window apr\'e8s.\cb1 \
\pard\pardeftab720\partightenfactor0

\b \cf2 \cb3 Comment obtenir des animations, par exemple pour l'ensemble de Julia dans Fract'ol ?
\b0 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Dans votre boucle d'events, faites en sorte de redessiner enti\'e8rement votre image apr\'e8s avoir chang\'e9 vos param\'e8tres, puis r\'e9affichez l'image avec mlx_put_image_to_window. Si vous voulez \'eatre propre, d\'e9truisez l'image avant avec mlx_destroy_image.\cb1 \
\
\cb3 Voil\'e0, vous avez tout pour commencer tranquillement \'e0 int\'e9grer les images dans vos projets graphiques. N'h\'e9sitez pas a poster vos questions ou remarques en commentaire, j'ai peut-\'eatre oubli\'e9 des pr\'e9cisions. Bonne chance \'e0 tous et on se revoit au RT !}